#!/usr/bin/env bash
# This script was generated by bashly 1.0.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
installer_usage() {
  if [[ -n $long_usage ]]; then
    printf "installer - Installer for my MacOS\n"
    echo

  else
    printf "installer - Installer for my MacOS\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  installer COMMAND\n"
  printf "  installer [COMMAND] --help | -h\n"
  printf "  installer --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install dependencies, if stated, and run brew bundle\n" "install      "
  printf "  %s   Copy secret files after revealing them\n" "copy-secrets "
  printf "  %s   Copy dotfiles to ~\n" "copy-dotfiles"
  printf "  %s   Import, export and list public and secret keys through GPG\n" "gpg          "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
installer_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "installer install - Install dependencies, if stated, and run brew bundle\n"
    echo

  else
    printf "installer install - Install dependencies, if stated, and run brew bundle\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  installer install [OPTIONS]\n"
  printf "  installer install --help\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--homebrew, -h"
    printf "    Install homebrew\n"
    echo

    # :flag.usage
    printf "  %s\n" "--ohmyzsh, -o"
    printf "    Install ohmyzsh\n"
    echo

    # :flag.usage
    printf "  %s\n" "--pass, -p"
    printf "    Install passwordstore\n"
    echo

    # :flag.usage
    printf "  %s\n" "--tmux, -t"
    printf "    Install tmux\n"
    echo

    # :flag.usage
    printf "  %s\n" "--vim, -v"
    printf "    Install vim\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
installer_copy_secrets_usage() {
  if [[ -n $long_usage ]]; then
    printf "installer copy-secrets - Copy secret files after revealing them\n"
    echo

  else
    printf "installer copy-secrets - Copy secret files after revealing them\n"
    echo

  fi

  printf "Alias: cs\n"
  echo

  printf "%s\n" "Usage:"
  printf "  installer copy-secrets\n"
  printf "  installer copy-secrets --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
installer_copy_dotfiles_usage() {
  if [[ -n $long_usage ]]; then
    printf "installer copy-dotfiles - Copy dotfiles to ~\n"
    echo

  else
    printf "installer copy-dotfiles - Copy dotfiles to ~\n"
    echo

  fi

  printf "Alias: cd\n"
  echo

  printf "%s\n" "Usage:"
  printf "  installer copy-dotfiles\n"
  printf "  installer copy-dotfiles --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
installer_gpg_usage() {
  if [[ -n $long_usage ]]; then
    printf "installer gpg - Import, export and list public and secret keys through GPG\n"
    echo

  else
    printf "installer gpg - Import, export and list public and secret keys through GPG\n"
    echo

  fi

  printf "Alias: g\n"
  echo

  printf "%s\n" "Usage:"
  printf "  installer gpg [OPTIONS]\n"
  printf "  installer gpg --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--list-secret-keys, -s"
    printf "    List secret keys\n"
    echo

    # :flag.usage
    printf "  %s\n" "--list-public-keys, -p"
    printf "    List public keys\n"
    echo

    # :flag.usage
    printf "  %s\n" "--import-secret-key, -i SECRET-KEY-PATH"
    printf "    Import encrypted private key to gpg store using symmetric cipher with a\n    memorable password\n"
    echo

    # :flag.usage
    printf "  %s\n" "--import-public-key, -y PUBLIC-KEY-PATH"
    printf "    Import encrypted public key to gpg store using symmetric cipher with a\n    memorable password\n"
    echo

    # :flag.usage
    printf "  %s\n" "--export-secret-key, -e SECRET-KEY-ID"
    printf "    Export secret-key id from gpg store using symmetric cipher with a memorable\n    password\n"
    echo

    # :flag.usage
    printf "  %s\n" "--export-public-key, -w PUBLIC-KEY-ID"
    printf "    Export public-key id from gpg store using symmetric cipher with a memorable\n    password\n"
    echo

    # :flag.usage
    printf "  %s\n" "--delete-key, -d SECRET-KEY-ID"
    printf "    Delete secret and public key from gpg store given its id\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
installer_install_command() {
  # src/install_command.sh
  homebrew_flag=${args[--homebrew]}
  ohmyzsh_flag=${args[--ohmyzsh]}
  pass_flag=${args[--pass]}
  vim_flag=${args[--vim]}
  tmux_flag=${args[--tmux]}

  if [[ $homebrew_flag ]]; then
    echo "installing homebrew with --homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  if [[ $ohmyzsh_flag ]]; then
    echo "installing ohmyzsh with --ohmyzsh"
    rm -rf ~/.oh-my-zsh
    git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
  fi

  if [[ $pass_flag ]]; then
    echo "installing pass with --pass"
    rm -rf ~/github/pass
    git clone git@github.com:jollopre/pass.git ~/github/pass
    ln -s -f ~/github/pass ~/.password-store
  fi

  if [[ $vim_flag ]]; then
    echo "installing vim with --vim"
    if [[ -e ~/.vimrc ]]; then
      cp -R skeletons ~
      rm -rf ~/.vim/bundle/Vundle.vim
      git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
      vim +PluginInstall +qall
    else
      echo "file .vimrc does not exist under ~, nothing will be installed"
    fi
  fi

  if [[ $tmux_flag ]]; then
    echo "installing tmux with --tmux"
    if [[ -e ~/.tmux.conf ]]; then
      rm -rf ~/.tmux/plugins/tpm
      git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    else
      echo "file .tmux.conf does not exist under ~, nothing will be installed"
    fi
  fi

  echo "Install or update according to Brewfile"
  brew bundle

}

# :command.function
installer_copy_secrets_command() {
  # src/copy_secrets_command.sh
  # Reveal every secret so that it can be properly placed within the machine
  echo "Decrypt all hidden files"
  git-secret reveal

  echo "Copy flywire decrypted files into ~"
  cp -R flywire ~
  ln -s -f ~/flywire/.extended-routes ~
  ln -s -f ~/flywire/.aws ~
  ln -s -f ~/flywire/.tokens.sh ~

  echo "Copy ssh decrypted files into ~"
  cp -R .ssh ~
  chmod 0600 ~/.ssh/id_rsa

}

# :command.function
installer_copy_dotfiles_command() {
  # src/copy_dotfiles_command.sh
  cp .gitconfig ~
  cp .tmux.conf ~
  cp .vimrc ~
  cp .zshrc ~

}

# :command.function
installer_gpg_command() {
  # src/gpg_command.sh
  secret_key_path_import=${args[--import-secret-key]}
  public_key_path_import=${args[--import-public-key]}
  secret_key_id=${args[--export-secret-key]}
  public_key_id=${args[--export-public-key]}
  delete_key_id=${args[--delete-key]}
  list_secret_keys=${args[--list-secret-keys]}
  list_public_keys=${args[--list-public-keys]}

  if [[ $secret_key_path_import ]]; then
    echo "Decrypting private key from $secret_key_path_import"
    gpg -o private.key -d $secret_key_path_import
    echo "Importing private key..."
    gpg --allow-secret-key-import --import private.key
    echo "Deleting generated private.key file"
    rm private.key
  fi

  if [[ $public_key_path_import ]]; then
    echo "Decrypting public key from $public_key_path_import"
    gpg -o public.key -d $public_key_path_import
    echo "Importing public key..."
    gpg --import public.key
    echo "Deleting generated public.key file"
    rm public.key
  fi

  if [[ $secret_key_id ]]; then
    echo "Exporting private key..."
    gpg --export-secret-keys $secret_key_id > private.key
    echo "Encrypting private key id '$secret_key_id'"
    gpg --symmetric --cipher-algo AES256 private.key
    echo "Deleting generated private.key file"
    rm private.key
    echo "Encrypted private key file located at './private.key.gpg'. Please copy it on safer place"
  fi

  if [[ $public_key_id ]]; then
    echo "Exporting public key..."
    gpg --export $public_key_id > public.key
    echo "Encrypting public key id '$public_key_id'"
    gpg --symmetric --cipher-algo AES256 public.key
    echo "Deleting generated public.key file"
    rm public.key
    echo "Encrypted public key file located at './public.key.gpg'. Please copy it on safer place"
  fi

  if [[ $delete_key_id ]]; then
    echo "Deleting secret-key with id '$delete_key_id'"
    gpg --delete-secret-keys $delete_key_id
    echo "Deleting public-key with id '$delete_key_id'"
    gpg --delete-keys $delete_key_id
  fi

  if [[ $list_secret_keys ]]; then
    gpg --list-secret-keys
  fi

  if [[ $list_public_keys ]]; then
    gpg --list-keys
  fi

  if [[ -z $secret_key_path_import && -z $public_key_path_import && -z $secret_key_id && -z $public_key_id && -z $delete_key_id && -z $list_secret_keys && -z $list_public_keys ]]; then
    echo "Listing public keys since no flags were passed"
    gpg --list-keys
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        installer_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      installer_install_parse_requirements "$@"
      shift $#
      ;;

    copy-secrets | cs)
      action="copy-secrets"
      shift
      installer_copy_secrets_parse_requirements "$@"
      shift $#
      ;;

    copy-dotfiles | cd)
      action="copy-dotfiles"
      shift
      installer_copy_dotfiles_parse_requirements "$@"
      shift $#
      ;;

    gpg | g)
      action="gpg"
      shift
      installer_gpg_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      installer_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
installer_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help)
        long_usage=yes
        installer_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v brew >/dev/null 2>&1; then
    printf "missing dependency: brew\n" >&2
    exit 1
  fi

  if ! command -v curl >/dev/null 2>&1; then
    printf "missing dependency: curl\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --homebrew | -h)

        # :flag.case_no_arg
        args['--homebrew']=1
        shift
        ;;

      # :flag.case
      --ohmyzsh | -o)

        # :flag.case_no_arg
        args['--ohmyzsh']=1
        shift
        ;;

      # :flag.case
      --pass | -p)

        # :flag.case_no_arg
        args['--pass']=1
        shift
        ;;

      # :flag.case
      --tmux | -t)

        # :flag.case_no_arg
        args['--tmux']=1
        shift
        ;;

      # :flag.case
      --vim | -v)

        # :flag.case_no_arg
        args['--vim']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
installer_copy_secrets_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        installer_copy_secrets_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v git-secret >/dev/null 2>&1; then
    printf "missing dependency: git-secret\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="copy-secrets"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
installer_copy_dotfiles_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        installer_copy_dotfiles_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="copy-dotfiles"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
installer_gpg_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        installer_gpg_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v gpg >/dev/null 2>&1; then
    printf "missing dependency: gpg\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="gpg"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --list-secret-keys | -s)

        # :flag.case_no_arg
        args['--list-secret-keys']=1
        shift
        ;;

      # :flag.case
      --list-public-keys | -p)

        # :flag.case_no_arg
        args['--list-public-keys']=1
        shift
        ;;

      # :flag.case
      --import-secret-key | -i)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--import-secret-key']="$2"
          shift
          shift
        else
          printf "%s\n" "--import-secret-key requires an argument: --import-secret-key, -i SECRET-KEY-PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --import-public-key | -y)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--import-public-key']="$2"
          shift
          shift
        else
          printf "%s\n" "--import-public-key requires an argument: --import-public-key, -y PUBLIC-KEY-PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --export-secret-key | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--export-secret-key']="$2"
          shift
          shift
        else
          printf "%s\n" "--export-secret-key requires an argument: --export-secret-key, -e SECRET-KEY-ID" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --export-public-key | -w)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--export-public-key']="$2"
          shift
          shift
        else
          printf "%s\n" "--export-public-key requires an argument: --export-public-key, -w PUBLIC-KEY-ID" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --delete-key | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--delete-key']="$2"
          shift
          shift
        else
          printf "%s\n" "--delete-key requires an argument: --delete-key, -d SECRET-KEY-ID" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

  # src/initialize.sh
  mkdir -p ~/gitlab
  mkdir -p ~/github

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        installer_install_usage
      else
        installer_install_command
      fi
      ;;

    "copy-secrets")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        installer_copy_secrets_usage
      else
        installer_copy_secrets_command
      fi
      ;;

    "copy-dotfiles")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        installer_copy_dotfiles_usage
      else
        installer_copy_dotfiles_command
      fi
      ;;

    "gpg")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        installer_gpg_usage
      else
        installer_gpg_command
      fi
      ;;

  esac
}

initialize
run "$@"
